module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePlace {
  count: Int!
}

type AggregatePlaceAddRequest {
  count: Int!
}

type AggregatePlaceComment {
  count: Int!
}

type AggregatePlaceEditRequest {
  count: Int!
}

type AggregatePlaceImage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createPlace(data: PlaceCreateInput!): Place!
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateManyPlaces(data: PlaceUpdateManyMutationInput!, where: PlaceWhereInput): BatchPayload!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deleteManyPlaces(where: PlaceWhereInput): BatchPayload!
  createPlaceAddRequest(data: PlaceAddRequestCreateInput!): PlaceAddRequest!
  updatePlaceAddRequest(data: PlaceAddRequestUpdateInput!, where: PlaceAddRequestWhereUniqueInput!): PlaceAddRequest
  updateManyPlaceAddRequests(data: PlaceAddRequestUpdateManyMutationInput!, where: PlaceAddRequestWhereInput): BatchPayload!
  upsertPlaceAddRequest(where: PlaceAddRequestWhereUniqueInput!, create: PlaceAddRequestCreateInput!, update: PlaceAddRequestUpdateInput!): PlaceAddRequest!
  deletePlaceAddRequest(where: PlaceAddRequestWhereUniqueInput!): PlaceAddRequest
  deleteManyPlaceAddRequests(where: PlaceAddRequestWhereInput): BatchPayload!
  createPlaceComment(data: PlaceCommentCreateInput!): PlaceComment!
  updatePlaceComment(data: PlaceCommentUpdateInput!, where: PlaceCommentWhereUniqueInput!): PlaceComment
  updateManyPlaceComments(data: PlaceCommentUpdateManyMutationInput!, where: PlaceCommentWhereInput): BatchPayload!
  upsertPlaceComment(where: PlaceCommentWhereUniqueInput!, create: PlaceCommentCreateInput!, update: PlaceCommentUpdateInput!): PlaceComment!
  deletePlaceComment(where: PlaceCommentWhereUniqueInput!): PlaceComment
  deleteManyPlaceComments(where: PlaceCommentWhereInput): BatchPayload!
  createPlaceEditRequest(data: PlaceEditRequestCreateInput!): PlaceEditRequest!
  updatePlaceEditRequest(data: PlaceEditRequestUpdateInput!, where: PlaceEditRequestWhereUniqueInput!): PlaceEditRequest
  updateManyPlaceEditRequests(data: PlaceEditRequestUpdateManyMutationInput!, where: PlaceEditRequestWhereInput): BatchPayload!
  upsertPlaceEditRequest(where: PlaceEditRequestWhereUniqueInput!, create: PlaceEditRequestCreateInput!, update: PlaceEditRequestUpdateInput!): PlaceEditRequest!
  deletePlaceEditRequest(where: PlaceEditRequestWhereUniqueInput!): PlaceEditRequest
  deleteManyPlaceEditRequests(where: PlaceEditRequestWhereInput): BatchPayload!
  createPlaceImage(data: PlaceImageCreateInput!): PlaceImage!
  updatePlaceImage(data: PlaceImageUpdateInput!, where: PlaceImageWhereUniqueInput!): PlaceImage
  updateManyPlaceImages(data: PlaceImageUpdateManyMutationInput!, where: PlaceImageWhereInput): BatchPayload!
  upsertPlaceImage(where: PlaceImageWhereUniqueInput!, create: PlaceImageCreateInput!, update: PlaceImageUpdateInput!): PlaceImage!
  deletePlaceImage(where: PlaceImageWhereUniqueInput!): PlaceImage
  deleteManyPlaceImages(where: PlaceImageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Place {
  id: ID!
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  comments(where: PlaceCommentWhereInput, orderBy: PlaceCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceComment!]
  images(where: PlaceImageWhereInput, orderBy: PlaceImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceImage!]
  bookmark(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlaceAddRequest {
  id: ID!
  name: String!
  address: String!
  images: Json!
  user: User!
}

type PlaceAddRequestConnection {
  pageInfo: PageInfo!
  edges: [PlaceAddRequestEdge]!
  aggregate: AggregatePlaceAddRequest!
}

input PlaceAddRequestCreateInput {
  id: ID
  name: String!
  address: String!
  images: Json!
  user: UserCreateOneInput!
}

type PlaceAddRequestEdge {
  node: PlaceAddRequest!
  cursor: String!
}

enum PlaceAddRequestOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  images_ASC
  images_DESC
}

type PlaceAddRequestPreviousValues {
  id: ID!
  name: String!
  address: String!
  images: Json!
}

type PlaceAddRequestSubscriptionPayload {
  mutation: MutationType!
  node: PlaceAddRequest
  updatedFields: [String!]
  previousValues: PlaceAddRequestPreviousValues
}

input PlaceAddRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceAddRequestWhereInput
  AND: [PlaceAddRequestSubscriptionWhereInput!]
  OR: [PlaceAddRequestSubscriptionWhereInput!]
  NOT: [PlaceAddRequestSubscriptionWhereInput!]
}

input PlaceAddRequestUpdateInput {
  name: String
  address: String
  images: Json
  user: UserUpdateOneRequiredInput
}

input PlaceAddRequestUpdateManyMutationInput {
  name: String
  address: String
  images: Json
}

input PlaceAddRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  user: UserWhereInput
  AND: [PlaceAddRequestWhereInput!]
  OR: [PlaceAddRequestWhereInput!]
  NOT: [PlaceAddRequestWhereInput!]
}

input PlaceAddRequestWhereUniqueInput {
  id: ID
}

type PlaceComment {
  id: ID!
  rating: Float!
  content: String!
  user: User!
  place: Place!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlaceCommentConnection {
  pageInfo: PageInfo!
  edges: [PlaceCommentEdge]!
  aggregate: AggregatePlaceComment!
}

input PlaceCommentCreateInput {
  id: ID
  rating: Float!
  content: String!
  user: UserCreateOneWithoutCommentsInput!
  place: PlaceCreateOneWithoutCommentsInput!
}

input PlaceCommentCreateManyWithoutPlaceInput {
  create: [PlaceCommentCreateWithoutPlaceInput!]
  connect: [PlaceCommentWhereUniqueInput!]
}

input PlaceCommentCreateManyWithoutUserInput {
  create: [PlaceCommentCreateWithoutUserInput!]
  connect: [PlaceCommentWhereUniqueInput!]
}

input PlaceCommentCreateWithoutPlaceInput {
  id: ID
  rating: Float!
  content: String!
  user: UserCreateOneWithoutCommentsInput!
}

input PlaceCommentCreateWithoutUserInput {
  id: ID
  rating: Float!
  content: String!
  place: PlaceCreateOneWithoutCommentsInput!
}

type PlaceCommentEdge {
  node: PlaceComment!
  cursor: String!
}

enum PlaceCommentOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlaceCommentPreviousValues {
  id: ID!
  rating: Float!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PlaceCommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaceCommentScalarWhereInput!]
  OR: [PlaceCommentScalarWhereInput!]
  NOT: [PlaceCommentScalarWhereInput!]
}

type PlaceCommentSubscriptionPayload {
  mutation: MutationType!
  node: PlaceComment
  updatedFields: [String!]
  previousValues: PlaceCommentPreviousValues
}

input PlaceCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceCommentWhereInput
  AND: [PlaceCommentSubscriptionWhereInput!]
  OR: [PlaceCommentSubscriptionWhereInput!]
  NOT: [PlaceCommentSubscriptionWhereInput!]
}

input PlaceCommentUpdateInput {
  rating: Float
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  place: PlaceUpdateOneRequiredWithoutCommentsInput
}

input PlaceCommentUpdateManyDataInput {
  rating: Float
  content: String
}

input PlaceCommentUpdateManyMutationInput {
  rating: Float
  content: String
}

input PlaceCommentUpdateManyWithoutPlaceInput {
  create: [PlaceCommentCreateWithoutPlaceInput!]
  delete: [PlaceCommentWhereUniqueInput!]
  connect: [PlaceCommentWhereUniqueInput!]
  set: [PlaceCommentWhereUniqueInput!]
  disconnect: [PlaceCommentWhereUniqueInput!]
  update: [PlaceCommentUpdateWithWhereUniqueWithoutPlaceInput!]
  upsert: [PlaceCommentUpsertWithWhereUniqueWithoutPlaceInput!]
  deleteMany: [PlaceCommentScalarWhereInput!]
  updateMany: [PlaceCommentUpdateManyWithWhereNestedInput!]
}

input PlaceCommentUpdateManyWithoutUserInput {
  create: [PlaceCommentCreateWithoutUserInput!]
  delete: [PlaceCommentWhereUniqueInput!]
  connect: [PlaceCommentWhereUniqueInput!]
  set: [PlaceCommentWhereUniqueInput!]
  disconnect: [PlaceCommentWhereUniqueInput!]
  update: [PlaceCommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PlaceCommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PlaceCommentScalarWhereInput!]
  updateMany: [PlaceCommentUpdateManyWithWhereNestedInput!]
}

input PlaceCommentUpdateManyWithWhereNestedInput {
  where: PlaceCommentScalarWhereInput!
  data: PlaceCommentUpdateManyDataInput!
}

input PlaceCommentUpdateWithoutPlaceDataInput {
  rating: Float
  content: String
  user: UserUpdateOneRequiredWithoutCommentsInput
}

input PlaceCommentUpdateWithoutUserDataInput {
  rating: Float
  content: String
  place: PlaceUpdateOneRequiredWithoutCommentsInput
}

input PlaceCommentUpdateWithWhereUniqueWithoutPlaceInput {
  where: PlaceCommentWhereUniqueInput!
  data: PlaceCommentUpdateWithoutPlaceDataInput!
}

input PlaceCommentUpdateWithWhereUniqueWithoutUserInput {
  where: PlaceCommentWhereUniqueInput!
  data: PlaceCommentUpdateWithoutUserDataInput!
}

input PlaceCommentUpsertWithWhereUniqueWithoutPlaceInput {
  where: PlaceCommentWhereUniqueInput!
  update: PlaceCommentUpdateWithoutPlaceDataInput!
  create: PlaceCommentCreateWithoutPlaceInput!
}

input PlaceCommentUpsertWithWhereUniqueWithoutUserInput {
  where: PlaceCommentWhereUniqueInput!
  update: PlaceCommentUpdateWithoutUserDataInput!
  create: PlaceCommentCreateWithoutUserInput!
}

input PlaceCommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  place: PlaceWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaceCommentWhereInput!]
  OR: [PlaceCommentWhereInput!]
  NOT: [PlaceCommentWhereInput!]
}

input PlaceCommentWhereUniqueInput {
  id: ID
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreateInput {
  id: ID
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  comments: PlaceCommentCreateManyWithoutPlaceInput
  images: PlaceImageCreateManyWithoutPlaceInput
  bookmark: UserCreateManyWithoutBookmarkInput
}

input PlaceCreateManyWithoutBookmarkInput {
  create: [PlaceCreateWithoutBookmarkInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateOneInput {
  create: PlaceCreateInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutCommentsInput {
  create: PlaceCreateWithoutCommentsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutImagesInput {
  create: PlaceCreateWithoutImagesInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateWithoutBookmarkInput {
  id: ID
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  comments: PlaceCommentCreateManyWithoutPlaceInput
  images: PlaceImageCreateManyWithoutPlaceInput
}

input PlaceCreateWithoutCommentsInput {
  id: ID
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  images: PlaceImageCreateManyWithoutPlaceInput
  bookmark: UserCreateManyWithoutBookmarkInput
}

input PlaceCreateWithoutImagesInput {
  id: ID
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  comments: PlaceCommentCreateManyWithoutPlaceInput
  bookmark: UserCreateManyWithoutBookmarkInput
}

type PlaceEdge {
  node: Place!
  cursor: String!
}

type PlaceEditRequest {
  id: ID!
  comment: String!
  place: Place!
  user: User!
}

type PlaceEditRequestConnection {
  pageInfo: PageInfo!
  edges: [PlaceEditRequestEdge]!
  aggregate: AggregatePlaceEditRequest!
}

input PlaceEditRequestCreateInput {
  id: ID
  comment: String!
  place: PlaceCreateOneInput!
  user: UserCreateOneInput!
}

type PlaceEditRequestEdge {
  node: PlaceEditRequest!
  cursor: String!
}

enum PlaceEditRequestOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
}

type PlaceEditRequestPreviousValues {
  id: ID!
  comment: String!
}

type PlaceEditRequestSubscriptionPayload {
  mutation: MutationType!
  node: PlaceEditRequest
  updatedFields: [String!]
  previousValues: PlaceEditRequestPreviousValues
}

input PlaceEditRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceEditRequestWhereInput
  AND: [PlaceEditRequestSubscriptionWhereInput!]
  OR: [PlaceEditRequestSubscriptionWhereInput!]
  NOT: [PlaceEditRequestSubscriptionWhereInput!]
}

input PlaceEditRequestUpdateInput {
  comment: String
  place: PlaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
}

input PlaceEditRequestUpdateManyMutationInput {
  comment: String
}

input PlaceEditRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  place: PlaceWhereInput
  user: UserWhereInput
  AND: [PlaceEditRequestWhereInput!]
  OR: [PlaceEditRequestWhereInput!]
  NOT: [PlaceEditRequestWhereInput!]
}

input PlaceEditRequestWhereUniqueInput {
  id: ID
}

type PlaceImage {
  id: ID!
  uri: String!
  place: Place!
  user: User!
}

type PlaceImageConnection {
  pageInfo: PageInfo!
  edges: [PlaceImageEdge]!
  aggregate: AggregatePlaceImage!
}

input PlaceImageCreateInput {
  id: ID
  uri: String!
  place: PlaceCreateOneWithoutImagesInput!
  user: UserCreateOneWithoutImagesInput!
}

input PlaceImageCreateManyWithoutPlaceInput {
  create: [PlaceImageCreateWithoutPlaceInput!]
  connect: [PlaceImageWhereUniqueInput!]
}

input PlaceImageCreateManyWithoutUserInput {
  create: [PlaceImageCreateWithoutUserInput!]
  connect: [PlaceImageWhereUniqueInput!]
}

input PlaceImageCreateWithoutPlaceInput {
  id: ID
  uri: String!
  user: UserCreateOneWithoutImagesInput!
}

input PlaceImageCreateWithoutUserInput {
  id: ID
  uri: String!
  place: PlaceCreateOneWithoutImagesInput!
}

type PlaceImageEdge {
  node: PlaceImage!
  cursor: String!
}

enum PlaceImageOrderByInput {
  id_ASC
  id_DESC
  uri_ASC
  uri_DESC
}

type PlaceImagePreviousValues {
  id: ID!
  uri: String!
}

input PlaceImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  AND: [PlaceImageScalarWhereInput!]
  OR: [PlaceImageScalarWhereInput!]
  NOT: [PlaceImageScalarWhereInput!]
}

type PlaceImageSubscriptionPayload {
  mutation: MutationType!
  node: PlaceImage
  updatedFields: [String!]
  previousValues: PlaceImagePreviousValues
}

input PlaceImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceImageWhereInput
  AND: [PlaceImageSubscriptionWhereInput!]
  OR: [PlaceImageSubscriptionWhereInput!]
  NOT: [PlaceImageSubscriptionWhereInput!]
}

input PlaceImageUpdateInput {
  uri: String
  place: PlaceUpdateOneRequiredWithoutImagesInput
  user: UserUpdateOneRequiredWithoutImagesInput
}

input PlaceImageUpdateManyDataInput {
  uri: String
}

input PlaceImageUpdateManyMutationInput {
  uri: String
}

input PlaceImageUpdateManyWithoutPlaceInput {
  create: [PlaceImageCreateWithoutPlaceInput!]
  delete: [PlaceImageWhereUniqueInput!]
  connect: [PlaceImageWhereUniqueInput!]
  set: [PlaceImageWhereUniqueInput!]
  disconnect: [PlaceImageWhereUniqueInput!]
  update: [PlaceImageUpdateWithWhereUniqueWithoutPlaceInput!]
  upsert: [PlaceImageUpsertWithWhereUniqueWithoutPlaceInput!]
  deleteMany: [PlaceImageScalarWhereInput!]
  updateMany: [PlaceImageUpdateManyWithWhereNestedInput!]
}

input PlaceImageUpdateManyWithoutUserInput {
  create: [PlaceImageCreateWithoutUserInput!]
  delete: [PlaceImageWhereUniqueInput!]
  connect: [PlaceImageWhereUniqueInput!]
  set: [PlaceImageWhereUniqueInput!]
  disconnect: [PlaceImageWhereUniqueInput!]
  update: [PlaceImageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PlaceImageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PlaceImageScalarWhereInput!]
  updateMany: [PlaceImageUpdateManyWithWhereNestedInput!]
}

input PlaceImageUpdateManyWithWhereNestedInput {
  where: PlaceImageScalarWhereInput!
  data: PlaceImageUpdateManyDataInput!
}

input PlaceImageUpdateWithoutPlaceDataInput {
  uri: String
  user: UserUpdateOneRequiredWithoutImagesInput
}

input PlaceImageUpdateWithoutUserDataInput {
  uri: String
  place: PlaceUpdateOneRequiredWithoutImagesInput
}

input PlaceImageUpdateWithWhereUniqueWithoutPlaceInput {
  where: PlaceImageWhereUniqueInput!
  data: PlaceImageUpdateWithoutPlaceDataInput!
}

input PlaceImageUpdateWithWhereUniqueWithoutUserInput {
  where: PlaceImageWhereUniqueInput!
  data: PlaceImageUpdateWithoutUserDataInput!
}

input PlaceImageUpsertWithWhereUniqueWithoutPlaceInput {
  where: PlaceImageWhereUniqueInput!
  update: PlaceImageUpdateWithoutPlaceDataInput!
  create: PlaceImageCreateWithoutPlaceInput!
}

input PlaceImageUpsertWithWhereUniqueWithoutUserInput {
  where: PlaceImageWhereUniqueInput!
  update: PlaceImageUpdateWithoutUserDataInput!
  create: PlaceImageCreateWithoutUserInput!
}

input PlaceImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  place: PlaceWhereInput
  user: UserWhereInput
  AND: [PlaceImageWhereInput!]
  OR: [PlaceImageWhereInput!]
  NOT: [PlaceImageWhereInput!]
}

input PlaceImageWhereUniqueInput {
  id: ID
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  name_ASC
  name_DESC
  management_ASC
  management_DESC
  contact_ASC
  contact_DESC
  hours_ASC
  hours_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlacePreviousValues {
  id: ID!
  lat: Float!
  lng: Float!
  name: String!
  management: String
  contact: String
  hours: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PlaceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  management: String
  management_not: String
  management_in: [String!]
  management_not_in: [String!]
  management_lt: String
  management_lte: String
  management_gt: String
  management_gte: String
  management_contains: String
  management_not_contains: String
  management_starts_with: String
  management_not_starts_with: String
  management_ends_with: String
  management_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  hours: String
  hours_not: String
  hours_in: [String!]
  hours_not_in: [String!]
  hours_lt: String
  hours_lte: String
  hours_gt: String
  hours_gte: String
  hours_contains: String
  hours_not_contains: String
  hours_starts_with: String
  hours_not_starts_with: String
  hours_ends_with: String
  hours_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaceScalarWhereInput!]
  OR: [PlaceScalarWhereInput!]
  NOT: [PlaceScalarWhereInput!]
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
  AND: [PlaceSubscriptionWhereInput!]
  OR: [PlaceSubscriptionWhereInput!]
  NOT: [PlaceSubscriptionWhereInput!]
}

input PlaceUpdateDataInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
  comments: PlaceCommentUpdateManyWithoutPlaceInput
  images: PlaceImageUpdateManyWithoutPlaceInput
  bookmark: UserUpdateManyWithoutBookmarkInput
}

input PlaceUpdateInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
  comments: PlaceCommentUpdateManyWithoutPlaceInput
  images: PlaceImageUpdateManyWithoutPlaceInput
  bookmark: UserUpdateManyWithoutBookmarkInput
}

input PlaceUpdateManyDataInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
}

input PlaceUpdateManyMutationInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
}

input PlaceUpdateManyWithoutBookmarkInput {
  create: [PlaceCreateWithoutBookmarkInput!]
  delete: [PlaceWhereUniqueInput!]
  connect: [PlaceWhereUniqueInput!]
  set: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithWhereUniqueWithoutBookmarkInput!]
  upsert: [PlaceUpsertWithWhereUniqueWithoutBookmarkInput!]
  deleteMany: [PlaceScalarWhereInput!]
  updateMany: [PlaceUpdateManyWithWhereNestedInput!]
}

input PlaceUpdateManyWithWhereNestedInput {
  where: PlaceScalarWhereInput!
  data: PlaceUpdateManyDataInput!
}

input PlaceUpdateOneRequiredInput {
  create: PlaceCreateInput
  update: PlaceUpdateDataInput
  upsert: PlaceUpsertNestedInput
  connect: PlaceWhereUniqueInput
}

input PlaceUpdateOneRequiredWithoutCommentsInput {
  create: PlaceCreateWithoutCommentsInput
  update: PlaceUpdateWithoutCommentsDataInput
  upsert: PlaceUpsertWithoutCommentsInput
  connect: PlaceWhereUniqueInput
}

input PlaceUpdateOneRequiredWithoutImagesInput {
  create: PlaceCreateWithoutImagesInput
  update: PlaceUpdateWithoutImagesDataInput
  upsert: PlaceUpsertWithoutImagesInput
  connect: PlaceWhereUniqueInput
}

input PlaceUpdateWithoutBookmarkDataInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
  comments: PlaceCommentUpdateManyWithoutPlaceInput
  images: PlaceImageUpdateManyWithoutPlaceInput
}

input PlaceUpdateWithoutCommentsDataInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
  images: PlaceImageUpdateManyWithoutPlaceInput
  bookmark: UserUpdateManyWithoutBookmarkInput
}

input PlaceUpdateWithoutImagesDataInput {
  lat: Float
  lng: Float
  name: String
  management: String
  contact: String
  hours: String
  status: String
  comments: PlaceCommentUpdateManyWithoutPlaceInput
  bookmark: UserUpdateManyWithoutBookmarkInput
}

input PlaceUpdateWithWhereUniqueWithoutBookmarkInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutBookmarkDataInput!
}

input PlaceUpsertNestedInput {
  update: PlaceUpdateDataInput!
  create: PlaceCreateInput!
}

input PlaceUpsertWithoutCommentsInput {
  update: PlaceUpdateWithoutCommentsDataInput!
  create: PlaceCreateWithoutCommentsInput!
}

input PlaceUpsertWithoutImagesInput {
  update: PlaceUpdateWithoutImagesDataInput!
  create: PlaceCreateWithoutImagesInput!
}

input PlaceUpsertWithWhereUniqueWithoutBookmarkInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutBookmarkDataInput!
  create: PlaceCreateWithoutBookmarkInput!
}

input PlaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  management: String
  management_not: String
  management_in: [String!]
  management_not_in: [String!]
  management_lt: String
  management_lte: String
  management_gt: String
  management_gte: String
  management_contains: String
  management_not_contains: String
  management_starts_with: String
  management_not_starts_with: String
  management_ends_with: String
  management_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  hours: String
  hours_not: String
  hours_in: [String!]
  hours_not_in: [String!]
  hours_lt: String
  hours_lte: String
  hours_gt: String
  hours_gte: String
  hours_contains: String
  hours_not_contains: String
  hours_starts_with: String
  hours_not_starts_with: String
  hours_ends_with: String
  hours_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  comments_every: PlaceCommentWhereInput
  comments_some: PlaceCommentWhereInput
  comments_none: PlaceCommentWhereInput
  images_every: PlaceImageWhereInput
  images_some: PlaceImageWhereInput
  images_none: PlaceImageWhereInput
  bookmark_every: UserWhereInput
  bookmark_some: UserWhereInput
  bookmark_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  NOT: [PlaceWhereInput!]
}

input PlaceWhereUniqueInput {
  id: ID
}

type Query {
  place(where: PlaceWhereUniqueInput!): Place
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  placeAddRequest(where: PlaceAddRequestWhereUniqueInput!): PlaceAddRequest
  placeAddRequests(where: PlaceAddRequestWhereInput, orderBy: PlaceAddRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceAddRequest]!
  placeAddRequestsConnection(where: PlaceAddRequestWhereInput, orderBy: PlaceAddRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceAddRequestConnection!
  placeComment(where: PlaceCommentWhereUniqueInput!): PlaceComment
  placeComments(where: PlaceCommentWhereInput, orderBy: PlaceCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceComment]!
  placeCommentsConnection(where: PlaceCommentWhereInput, orderBy: PlaceCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceCommentConnection!
  placeEditRequest(where: PlaceEditRequestWhereUniqueInput!): PlaceEditRequest
  placeEditRequests(where: PlaceEditRequestWhereInput, orderBy: PlaceEditRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceEditRequest]!
  placeEditRequestsConnection(where: PlaceEditRequestWhereInput, orderBy: PlaceEditRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceEditRequestConnection!
  placeImage(where: PlaceImageWhereUniqueInput!): PlaceImage
  placeImages(where: PlaceImageWhereInput, orderBy: PlaceImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceImage]!
  placeImagesConnection(where: PlaceImageWhereInput, orderBy: PlaceImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceImageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  placeAddRequest(where: PlaceAddRequestSubscriptionWhereInput): PlaceAddRequestSubscriptionPayload
  placeComment(where: PlaceCommentSubscriptionWhereInput): PlaceCommentSubscriptionPayload
  placeEditRequest(where: PlaceEditRequestSubscriptionWhereInput): PlaceEditRequestSubscriptionPayload
  placeImage(where: PlaceImageSubscriptionWhereInput): PlaceImageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String!
  images(where: PlaceImageWhereInput, orderBy: PlaceImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceImage!]
  comments(where: PlaceCommentWhereInput, orderBy: PlaceCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlaceComment!]
  bookmark(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String
  images: PlaceImageCreateManyWithoutUserInput
  comments: PlaceCommentCreateManyWithoutUserInput
  bookmark: PlaceCreateManyWithoutBookmarkInput
}

input UserCreateManyWithoutBookmarkInput {
  create: [UserCreateWithoutBookmarkInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookmarkInput {
  id: ID
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String
  images: PlaceImageCreateManyWithoutUserInput
  comments: PlaceCommentCreateManyWithoutUserInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String
  images: PlaceImageCreateManyWithoutUserInput
  bookmark: PlaceCreateManyWithoutBookmarkInput
}

input UserCreateWithoutImagesInput {
  id: ID
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String
  comments: PlaceCommentCreateManyWithoutUserInput
  bookmark: PlaceCreateManyWithoutBookmarkInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  uniqId_ASC
  uniqId_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  age_ASC
  age_DESC
  profileImage_ASC
  profileImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  uniqId: String
  email: String!
  name: String!
  gender: String!
  age: String!
  profileImage: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uniqId: String
  uniqId_not: String
  uniqId_in: [String!]
  uniqId_not_in: [String!]
  uniqId_lt: String
  uniqId_lte: String
  uniqId_gt: String
  uniqId_gte: String
  uniqId_contains: String
  uniqId_not_contains: String
  uniqId_starts_with: String
  uniqId_not_starts_with: String
  uniqId_ends_with: String
  uniqId_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
  images: PlaceImageUpdateManyWithoutUserInput
  comments: PlaceCommentUpdateManyWithoutUserInput
  bookmark: PlaceUpdateManyWithoutBookmarkInput
}

input UserUpdateInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
  images: PlaceImageUpdateManyWithoutUserInput
  comments: PlaceCommentUpdateManyWithoutUserInput
  bookmark: PlaceUpdateManyWithoutBookmarkInput
}

input UserUpdateManyDataInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
}

input UserUpdateManyMutationInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
}

input UserUpdateManyWithoutBookmarkInput {
  create: [UserCreateWithoutBookmarkInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBookmarkInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBookmarkInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutImagesInput {
  create: UserCreateWithoutImagesInput
  update: UserUpdateWithoutImagesDataInput
  upsert: UserUpsertWithoutImagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBookmarkDataInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
  images: PlaceImageUpdateManyWithoutUserInput
  comments: PlaceCommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutCommentsDataInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
  images: PlaceImageUpdateManyWithoutUserInput
  bookmark: PlaceUpdateManyWithoutBookmarkInput
}

input UserUpdateWithoutImagesDataInput {
  uniqId: String
  email: String
  name: String
  gender: String
  age: String
  profileImage: String
  comments: PlaceCommentUpdateManyWithoutUserInput
  bookmark: PlaceUpdateManyWithoutBookmarkInput
}

input UserUpdateWithWhereUniqueWithoutBookmarkInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBookmarkDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutImagesInput {
  update: UserUpdateWithoutImagesDataInput!
  create: UserCreateWithoutImagesInput!
}

input UserUpsertWithWhereUniqueWithoutBookmarkInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBookmarkDataInput!
  create: UserCreateWithoutBookmarkInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uniqId: String
  uniqId_not: String
  uniqId_in: [String!]
  uniqId_not_in: [String!]
  uniqId_lt: String
  uniqId_lte: String
  uniqId_gt: String
  uniqId_gte: String
  uniqId_contains: String
  uniqId_not_contains: String
  uniqId_starts_with: String
  uniqId_not_starts_with: String
  uniqId_ends_with: String
  uniqId_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  images_every: PlaceImageWhereInput
  images_some: PlaceImageWhereInput
  images_none: PlaceImageWhereInput
  comments_every: PlaceCommentWhereInput
  comments_some: PlaceCommentWhereInput
  comments_none: PlaceCommentWhereInput
  bookmark_every: PlaceWhereInput
  bookmark_some: PlaceWhereInput
  bookmark_none: PlaceWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  uniqId: String
  email: String
}
`
      }
    